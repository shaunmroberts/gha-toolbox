name: "Release tag"
description: "Determines what the next release version should be by examining git
  tags. Assumes tags take the form of `v\\d+`. This action does not require a clone
  of the repository"
inputs:
  owner:
    description: Owner of repository
    required: true
    default: ${{ github.event.repository.owner.login }}
  repo:
    description: Github repository
    required: true
    default: ${{ github.event.repository.name }}
  create-tag:
    default: "false"
    description: "If true, then creates the release tag as well"
  tag-prefix:
    required: false
    description: "Optional path style prefix for tag"
  github-token:
    description: Github token to use
    required: false
    default: ${{ github.token }}
outputs:
  next:
    description: "The next release version"
    value: ${{ steps.next.outputs.next }}
  current:
    description: "The current release, can be empty"
    value: ${{ steps.current.outputs.current }}
runs:
  using: "composite"
  steps:
    - id: current
      shell: bash
      env:
        OWNER: ${{ inputs.owner }}
        REPO: ${{ inputs.repo }}
        PREFIX: ${{ inputs.tag-prefix }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        #@begin=bash@
        if [ ! -z "${PREFIX}" ] && [[ "${PREFIX}" != */ ]]; then
          PREFIX="${PREFIX}/"
        fi

        TAG_FILTER="^refs/tags/${PREFIX}v[0-9]+$"

        CURRENT_VERSION=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/${OWNER}/${REPO}/git/matching-refs/tags" | \
        jq --arg FILTER "${TAG_FILTER}" -r '.[] | select(.object.type == "commit" and (.ref | test($FILTER))) | .ref' | \
        tail -n1 | \
        sed 's|refs/tags/||g')
        echo "current=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        #@end=bash@
    - id: next
      shell: bash
      env:
        CURRENT_VERSION: ${{ steps.current.outputs.current }}
        PREFIX: ${{ inputs.tag-prefix }}
      run: |-
        #@begin=bash@
        if [ ! -z "${PREFIX}" ] && [[ "${PREFIX}" != */ ]]; then
          PREFIX="${PREFIX}/"
        fi

        if [ -z "${CURRENT_VERSION}" ]; then
          echo "next=${PREFIX}v1" >> $GITHUB_OUTPUT
          exit 0
        fi
        # otherwise we need our very good friend awk
        NEXT_VERSION=$(echo "$CURRENT_VERSION" | awk -F"${PREFIX}v" -v OFS="${PREFIX}v" '{$NF +=1 ; print }')
        echo "next=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        #@end=bash@
    - id: create
      if: ${{ inputs.create-tag == 'true' }}
      uses: actions/github-script@v6
      env:
        OWNER: ${{ inputs.owner }}
        REPO: ${{ inputs.repo }}
        TAG: ${{ steps.next.outputs.next }}
      with:
        script: |
          //@begin=js@
          const {OWNER, REPO, TAG} = process.env
          github.rest.git.createRef({
            owner: OWNER,
            repo: REPO,
            ref: `refs/tags/${TAG}`,
            sha: context.sha
          })
          //@end=js@
