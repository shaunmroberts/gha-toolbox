name: "Create release"
description: "Creates a github release and generates release notes based on provided tags"
inputs:
  release-tag:
    description: "Tag to create release from"
    required: true
  previous-tag:
    description: "Previous release tag, if available"
    required: false
  prerelease:
    description: "Set to true to create as prerelease"
    required: false
    default: "false"
  github-token:
    description: "Github token to use to create release"
    required: true
    default: ${{ github.token }}
  owner:
    description: Owner of repository
    required: true
    default: ${{ github.event.repository.owner.login }}
  repo:
    description: Github repository
    required: true
    default: ${{ github.event.repository.name }}
  release-name:
    description: "Name of the release"
    required: false

outputs:
  release-id:
    value: ${{ steps.create.outputs.id }}
    description: Github release id

runs:
  using: "composite"
  steps:
    - id: create
      uses: actions/github-script@v6
      env:
        RELEASE_TAG: ${{ inputs.release-tag }}
        PREVIOUS_TAG: ${{ inputs.previous-tag }}
        PRERELEAE: ${{ inputs.prerelease }}
        OWNER: ${{ inputs.owner }}
        REPO: ${{ inputs.repo }}
        NAME: ${{ inputs.release-name }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          //@begin=js@
          const { RELEASE_TAG, PREVIOUS_TAG, PRERELEAE, OWNER, REPO, NAME } = process.env

          const releaseNotes = await github.rest.repos.generateReleaseNotes({
              repo: REPO,
              owner: OWNER,
              tag_name: RELEASE_TAG,
              previous_tag_name: PREVIOUS_TAG
          });

          const isPrerelease = PRERELEAE.toLowerCase() == "true"

          const release = await github.rest.repos.createRelease({
              repo: REPO,
              owner: OWNER,
              tag_name: RELEASE_TAG,
              name: NAME || RELEASE_TAG,
              body: releaseNotes.data.body,
              draft: false,
              prerelease: isPrerelease,
          });

          core.setOutput("id", release.data.id);
          //@end=js@
